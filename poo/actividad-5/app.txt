organización de directorios(estructura):


/actividad-5
│
├── index.html              ← Punto de entrada
└── main.js             
│
├── /model                  ← Clases que representan figuras y lógica del juego
│   ├── Rectangle.js
│   ├── Circle.js           ← (en el futuro)
│   ├── Triangle.js         ← (en el futuro)
│   └── GameEngineRenderer.js
│
├── /controller             ← Controladores de entrada del usuario
│   └── RectangleController.js



---------------------------------------------------------------------------
//RectangleController.js

export class RectangleController {
    constructor(rectangle, renderer, canvas){
    this.rectangle=rectangle;
    this.renderer = renderer;
    this.canvas=canvas;

    window.addEventListener('keydown', (event) => this.KeyHandler(event));
    }

    KeyHandler(event) {
        switch (event.key) {

            case "ArrowUp" :
                this.rectangle.moveForward(canvas.canvas.width, this.canvas.height);
                break;
            case "ArrowDown":
                this.rectangle.moveBackward(canvas.canvas.width, this.canvas.height);
                break;
            case "ArrowLeft":
                this.rectangle.rotate(-0.1); // rotación antihoraria
                break;
            case "ArrowRight":
                this.rectangle.rotate(0.1);  // rotación horaria
                break;
        } 

        this.renderer.render(); // Actualiza canvas cvez que se presiona
   
        }

}
---------------------------------------------------------------------------
//GameEngineRenderer.js

export class GameEngineRenderer{
    constructor(canvasInstance){
        this.canvas = canvasInstance;
        this.context=this.canvas.getContext('2d');
        this.objects = new Map();
    }

    addObject (id,object){
        this.objects.set(id,object);
    }

    getObject(id){
        return this.objects.get(id);
    }

    render(){
        //Limpieza
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);

        //Dibujado
        for (const item of this.objects.values() )
        {
            item.draw(this.context);
        }
    }
}

function clearCanvas()
{
    context.clearRect(0, 0, canvas.width, canvas.height);
}
---------------------------------------------------------------------------
//Rectangle.js

export class Rectangle {
    constructor(x,y,w,h) {
        this.x=x;
        this.y = y;
        this.width = w;
        this.height = h;
        this.angle = 0;
        this.speed = 6; 
    }


    draw(context) {
        context.save();
        context.translate(this.x, this.y);
        context.rotate(this.angle);
        context.fillStyle = 'blue';
        context.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);
        context.restore();
    }

    rotate(radians) {
        this.angle += radians;
    }

    moveForward(canvasWidth, canvasHeight) {
        const nextX = this.x + this.speed * Math.cos(this.angle);
        const nextY = this.y + this.speed * Math.sin(this.angle);

         if (this.isInsideBounds(nextX, nextY, canvasWidth, canvasHeight)) {
            this.x = nextX;
            this.y = nextY;
    }

    }

    moveBackward(canvasWidth, canvasHeight) {
        const nextX = this.x - this.speed * Math.cos(this.angle);
        const nextY = this.y - this.speed * Math.sin(this.angle);

        if (this.isInsideBounds(nextX, nextY, canvasWidth, canvasHeight)) {
            this.x = nextX;
            this.y = nextY;
    }
    }

    isInsideBounds(x, y, canvasWidth, canvasHeight) {
        const halfWidth = this.width / 2;
        const halfHeight = this.height / 2;

        return (
            x - halfWidth >= 0 &&
            x + halfWidth <= canvasWidth &&
            y - halfHeight >= 0 &&
            y + halfHeight <= canvasHeight
        );
    }
}
---------------------------------------------------------------------------
<!-- index.html -->

<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <title>Canvas figuras en movimiento</title>
    <style>
        body 
        {
            width: 50%;
            height: 50%;
            border: 2px solid black;
        }
    </style>
</head>
<body>
</body>
<script type="module" src="./main.js"></script>
</html>

---------------------------------------------------------------------------
//main.js

import { GameEngineRenderer } from './model/GameEngineRenderer.js';
import { Rectangle } from './model/Rectangle.js';
import { RectangleController } from './controller/RectangleController.js';


function main()
{
    let canvas = document.createElement('canvas');
    canvas.width = 645;
    canvas.height = 400;
    document.body.appendChild(canvas);

    let renderer = new GameEngineRenderer(canvas);

    let rectangle = new Rectangle(200, 200, 100, 50);
    renderer.addObject('Rectangle1', rectangle);

    // Conectar el controlador al mismo rectángulo
    let controller = new RectangleController(rectangle, renderer, canvas);

        /*Por si desp quiero agregar otro 
        //  renderer.addObject('rectangulo 2', new Rectangle(200,200,180,80));
        // renderer.getObject('rectangulo 2').rotate( Math.PI / 4 );
        */

    setInterval( renderer.render.bind(renderer), 16 );
}
window.onload = main;
---------------------------------------------------------------------------



